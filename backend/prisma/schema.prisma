// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cars Car[]

  @@map("categories")
}

model Car {
  id          Int      @id @default(autoincrement())
  categoryId  Int?     @map("category_id")
  make        String?  @db.VarChar(100)
  model       String?  @db.VarChar(100)
  year        Int?
  mileage     Int?
  fuelType    String?  @map("fuel_type") @db.VarChar(50)
  transmission String? @db.VarChar(50)
  color       String?  @db.VarChar(50)
  engine      String?  @db.VarChar(100)
  bodyType    String?  @map("body_type") @db.VarChar(50)
  plateStatus String?  @map("plate_status") @db.VarChar(20)
  price       Decimal? @db.Decimal(12, 2)
  featured    Boolean  @default(false)
  coverImage  String?  @map("cover_image") @db.VarChar(500)
  status      String   @default("available") @db.VarChar(20)
  isSold      Boolean  @default(false) @map("is_sold")
  isIncoming  Boolean  @default(false) @map("is_incoming")
  isReserved  Boolean  @default(false) @map("is_reserved")
  expectedArrival DateTime? @map("expected_arrival")
  soldAt      DateTime? @map("sold_at")
  soldPrice   Decimal? @map("sold_price") @db.Decimal(12, 2)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  images   CarImage[]
  translations CarTranslation[]
  offers   Offer[]

  @@map("cars")
}

model CarImage {
  id        Int      @id @default(autoincrement())
  carId     Int      @map("car_id")
  imagePath String   @map("image_path") @db.VarChar(255)
  isMain    Boolean  @default(false) @map("is_main")
  sortOrder Int      @default(0) @map("sort_order")
  altText   String?  @map("alt_text") @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")

  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@map("car_images")
}

model CarTranslation {
  id            Int      @id @default(autoincrement())
  carId         Int      @map("car_id")
  lang          String   @db.VarChar(5)
  title         String?  @db.VarChar(255)
  description   String?  @db.Text
  seoTitle      String?  @map("seo_title") @db.VarChar(255)
  seoDescription String? @map("seo_description") @db.Text
  seoKeywords   String?  @map("seo_keywords") @db.Text
  createdAt     DateTime @default(now()) @map("created_at")

  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([carId, lang])
  @@map("car_translations")
}

model BlogPost {
  id        Int      @id @default(autoincrement())
  slug      String   @unique @db.VarChar(255)
  imgUrl    String?  @map("img_url") @db.VarChar(500)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  translations BlogTranslation[]
  images      BlogImage[]

  @@map("blog_posts")
}

model BlogTranslation {
  id            Int      @id @default(autoincrement())
  postId        Int      @map("post_id")
  lang          String   @db.VarChar(5)
  title         String?  @db.VarChar(255)
  content       String?  @db.Text
  seoTitle      String?  @map("seo_title") @db.VarChar(255)
  seoDescription String? @map("seo_description") @db.Text
  seoKeywords   String?  @map("seo_keywords") @db.Text
  createdAt     DateTime @default(now()) @map("created_at")

  post BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, lang])
  @@map("blog_translations")
}

model BlogImage {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  imagePath String   @map("image_path") @db.VarChar(255)
  isMain    Boolean  @default(false) @map("is_main")
  createdAt DateTime @default(now()) @map("created_at")

  post BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("blog_images")
}

model Customer {
  id        Int      @id @default(autoincrement())
  fullName  String?  @map("full_name") @db.VarChar(150)
  phone     String?  @db.VarChar(50)
  email     String?  @db.VarChar(150)
  createdAt DateTime @default(now()) @map("created_at")

  offers Offer[]

  @@map("customers")
}

model Offer {
  id         Int      @id @default(autoincrement())
  carId      Int?     @map("car_id")
  customerId Int?     @map("customer_id")
  message    String?  @db.Text
  status     String   @default("pending") @db.VarChar(20)
  createdAt  DateTime @default(now()) @map("created_at")

  car      Car?      @relation(fields: [carId], references: [id], onDelete: SetNull)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@map("offers")
}

model Page {
  id        Int      @id @default(autoincrement())
  slug      String   @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  translations PageTranslation[]

  @@map("pages")
}

model PageTranslation {
  id            Int      @id @default(autoincrement())
  pageId        Int      @map("page_id")
  lang          String   @db.VarChar(5)
  title         String?  @db.VarChar(255)
  content       String?  @db.Text
  seoTitle      String?  @map("seo_title") @db.VarChar(255)
  seoDescription String? @map("seo_description") @db.Text
  seoKeywords   String?  @map("seo_keywords") @db.Text
  createdAt     DateTime @default(now()) @map("created_at")

  page Page @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@unique([pageId, lang])
  @@map("page_translations")
}

model Setting {
  id        Int      @id @default(autoincrement())
  instagram String?  @db.VarChar(255)
  facebook  String?  @db.VarChar(255)
  whatsapp  String?  @db.VarChar(50)
  phone     String?  @db.VarChar(50)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("settings")
}